import sys

class Node:
    def __init__(self, item):
        self.data = item
        self.next = None                
        
class CircularLinkedList:
    def __init__(self):
        self.nodeCount = 0
        self.head = None                
    
    def __repr__(self):
        if self.nodeCount == 0:
            return "List is empty!"
        
        message = ""
        curr = self.head
        
        while curr == self.head:          
            message += str(curr.data)
            message += " -> "
            curr = curr.next
        
        while curr != self.head:
            message += str(curr.data)    
            message += " -> "
            curr = curr.next
            
        return message
    
    def getData(self, idx):
        if idx < 1 or idx > self.nodeCount:
            return None
        
        curr = self.head
        i = 1
        
        while i < idx:
            curr = curr.next
            i += 1
            
        return curr
    
    def getCount(self):
        return self.nodeCount
    
    def travelse(self):
        if self.nodeCount == 0:
            return "List is empty!"
        
        items = list()
        curr = self.head
        items.append(curr.data)
        curr = curr.next            
        
        while curr != self.head:
            items.append(curr.data)        
            curr = curr.next
        
        return items
    
    def append(self, newNode):
        curr = self.head
        
        if self.nodeCount == 0:
            self.head = newNode
            newNode.next = self.head
        else:
            while curr.next != self.head:
                curr = curr.next
            curr.next = newNode
            newNode.next = self.head
        self.nodeCount += 1
        
        return True
    
    def insertAt(self, idx, newNode):
        if idx < 1 or idx > self.nodeCount + 1:
            return False
        
        prev = self.getData(idx - 1)
        curr = self.getData(idx)
        
        if idx == 1:
            last = self.getData(self.nodeCount)
            newNode.next = curr    
            self.head = newNode
            last.next = self.head
            
        else:
            prev.next = newNode        
            newNode.next = curr
            
        if idx == self.nodeCount + 1:
            prev.next = newNode
            newNode.next = self.head
    
        self.nodeCount += 1
        return True
        
    def pop(self):
        curr = self.head
        
        if self.nodeCount == 0:
            return None
        
        if self.nodeCount == 1:
            self.head = None        
        
        else:
            while curr.next.next != self.head:
                curr = curr.next
            prev = curr
            curr = curr.next
            prev.next = self.head
        
        self.nodeCount -= 1
        return curr.data
    
    def deleteAt(self, idx):
        if idx < 1 or idx > self.nodeCount:
            return None
        
        curr = self.getData(idx)
        prev = self.getData(idx - 1)
        nextNode = self.getData(idx + 1)
        lastNode = self.getData(self.nodeCount)
        
        if idx == 1:
            curr = self.head
            self.head = nextNode
            lastNode.next = self.head
        
        else:
            prev.next = nextNode
        
        if idx == self.nodeCount:
            prev.next = self.head
        
        self.nodeCount -= 1
        return curr.data

    def remove(self, node):
        numList = self.travelse()
        for i, value in enumerate(numList):
            if node.data == value:
                idx = i + 1
        
        prev = self.getData(idx - 1)
        
        
        if idx == 1:#맨 앞
            #print(1)
            self.head = self.head.next
            if self.nodeCount != 1: #노드의 개수가 한 개가 아닐 때
                prev = self.getData(self.nodeCount - 1)
                prev.next = self.head
            else:                   #노드의 개수가 한 개 일때
                self.head = None

        else:
            #print(2)
            prev.next = prev.next.next
        
        if node.next == self.head:    #맨 뒤
            #print(3)
            prev.next = self.head
            
        self.nodeCount -= 1
        return True
            
    
    def removeTurns(self, num, pattern):
        numList = list()
        for i in range(1, num + 1):
            node = Node(i)
            self.append(node)
            
        curr = self.head
        i = 1
        
        while self.head != None:
            if i % pattern == 0:
                self.remove(curr)
                numList.append(curr.data)
            i += 1
            curr = curr.next
        
        return self.showJosephus(numList)
    
    def showJosephus(self, lists):
        message = "<"
        
        for i in range(len(lists)):
            message += str(lists[i])
            if i != len(lists) - 1:
                message += ", "
        
        message += ">"
        
        return message
