import sys
class Arraystack:
    
    def __init__(self):
        self.data = []
        
    def __repr__(self):
        if self.isEmpty():
            return "Stack is empty!"
        message = ""
        
        for idx, item in enumerate(reversed(self.data)):
            message += str(item)
            if idx != self.size() - 1:
                message += '\n'
                
        return message
    
    def size(self):
        return len(self.data)
    
    def isEmpty(self):
        return self.size() == 0
    
    def peek(self):
        if self.size() == 0:
            return None
        
        return self.data[-1]
    
    def push(self, item):
        self.data.append(item)
        return True
    
    def pop(self):
        if self.isEmpty():
            return None
        
        return self.data.pop()

def CheckingBracket():
    expr = sys.stdin.readline().rstrip()
    match = {
        ')': '(',
        '}': '{',
        ']': '['
    }
    s = Arraystack()
    
    for c in expr:
        if c in "({[":
            s.push(c)
        elif c in match:
            if s.isEmpty():
                return False
            else:
                t = s.pop()
                if t != match[c]:
                    return False
        
    return s.isEmpty()
    
def postfix():
    formula = sys.stdin.readline().rstrip()
    stack = Arraystack()
    postfix = ""
    prec = {'*' : 3, '/' : 3,
            '+' : 2, '-' : 2,
            '(' : 1
            }
    
    for item in formula:
        if item not in "*/+-()":
            postfix += item
        if item == '(':
            stack.push(item)
        if item == ")":
            while stack.peek() != '(':
                postfix += stack.pop()
            stack.pop()
        if item in "*/+-":
            if stack.isEmpty():
                stack.push(item)
            else:
                while not stack.isEmpty() and prec[item] <= prec[stack.peek()]:
                    postfix += stack.pop()
                stack.push(item)
    while stack.isEmpty() == False:
        postfix += stack.pop()

    return postfix
