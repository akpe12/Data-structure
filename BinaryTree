class Node:

    def __init__(self, item):
        self.data = item
        self.left = None
        self.right = None


    def size(self):
        l = self.left.size() if self.left else 0
        r = self.right.size() if self.right else 0
        return l + r + 1


    def depth(self):
        l = self.left.depth() if self.left else 0
        r = self.right.depth() if self.right else 0
        depthOfSubtree = l if l >= r else r
        
        return depthOfSubtree + 1
    
    def inorder(self):
        nodes = []
        
        if self.left:
            nodes += self.left.inorder()
        nodes.append(self.data)
        if self.right:
            nodes += self.right.inorder()
        
        return nodes
    
    def preorder(self):
        nodes = []
        
        nodes.append(self.data)
        if self.left:
            nodes += self.left.preorder()
        if self.right:
            nodes += self.right.preorder()
        
        return nodes
    
    def postorder(self):
        nodes = []
        
        if self.left:
            nodes += self.left.postorder()
        if self.right:
            nodes += self.right.postorder()
        nodes.append(self.data)
        
        return nodes


class BinaryTree:

    def __init__(self, r):
        self.root = r

    def size(self):
        if self.root:
            return self.root.size()
        else:
            return 0


    def depth(self):
        if self.root:
            return self.root.depth()
        else:
            return 0

    def inorder(self):
        if self.root:
            return self.root.inorder()
        else:
            return []
        
    def preorder(self):
        if self.root:
            return self.root.preorder()
        else:
            return []
        
    def postorder(self):
        if self.root:
            return self.root.postorder()
        else:
            return []
