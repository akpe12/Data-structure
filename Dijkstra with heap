#Dijkstra
#1. 출발 노드를 설정
#2. 최단 거리 테이블을 초기화
#3. 방문하지 않은 노드들 중 최단 거리 값을 가진 노드를 선택(like greedy)
#4. 해당 노드에서의 거리 + 이전 노드에서 해당 노드까지의 거리로 테이블 갱신
#5. 3~4 반복
#개선된 버전
#heap 자료구조를 사용하여
#3단계인 가장 최단 거리의 값을 갖고 있는 노드를 찾는다.
#이로 인해, 선형 탐색 시간이 아닌 로그 시간이 걸리게 되어
#Dijkstra의 시간 복잡도는 O(V^2)에서 O(ElogV)로 단축된다.
#우선순위 큐를 활용할 때는 PriorityQueue 혹은 heapq 모듈을 import 할 수 있는데
#PriorityQueue보다는 heapq가 더 빠르게 동작한다는 것 기억.
import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)

#노드, 간선의 개수, 시작 노드 번호, start/dest/dist(노드들의 정보) 입력받기.
node_num, edge_num = map(int, input().split())
start_node = int(input().rstrip())
visited = [False] * (node_num + 1)
distance = [INF] * (node_num + 1)
graph = [[] for _ in range(node_num + 1)]

for i in range(edge_num):
    start, dest, dist = map(int, input().split())
    graph[start].append((dest, dist))

def dijkstra(start):
    #heapq는 PriorityQueue 모듈과는 달리 리스트와 별개의 자료구조가 아니다.
    #최단 거리의 값을 가지고 있는 노드를 찾는 과정을 빨리 하기 위해 heap이 쓰이는 것 명심.
    #이전의 get_smallest_node 함수 과정이다.
    q = []
    heapq.heappush(q, (0, start))
    distance[start] = 0
    while q:
        #가장 최단 거리가 짧은 노드의 정보 꺼내기
        curr_dist, curr = heapq.heappop(q)
        #현재 갱신되어 있는 값보다 작은지
        #이미 방문된 적이 있는지 확인하는 과정
        if distance[curr] < curr_dist:
            continue
        for i in graph[curr]:
            cost = curr_dist + i[1]
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))
dijkstra(start_node)

for i in range(1, node_num + 1):
    if distance[i] == INF:
        print("Unreachable")
    else:
        print(distance[i])
