#Dijkstra
#1. 출발 노드를 설정
#2. 최단 거리 테이블을 초기화
#3. 방문하지 않은 노드들 중 최단 거리 값을 가진 노드를 선택(like greedy)
#4. 해당 노드에서의 거리 + 이전 노드에서 해당 노드까지의 거리로 테이블 갱신
#5. 3~4 반복
#O(V^2)의 시간 복잡도
#V는 노드의 개수(vertex == node)
#아래의 코드는 구현은 쉽지만 시간이 오래 걸리는 Dijkstra 구현
#get_smallest_node에서 매번 선형 탐색이 진행되어야 하고
#현재 노드와 연결된 노드를 매번 탐색해야 하므로
#따라서, 전체 노드 개수가 5천이하에서 사용하면 괜찮은 코드
#1만 넘어가면 개선된 버전을 구현해야 한다.
#get_smallest_node 과정을 heap자료구조를 사용해 탐색하면 선형 시간이 아닌 로그 시간이 걸린다.
import sys

input = sys.stdin.readline
node_num, edge_num = map(int, input().split())
start_node = int(input().rstrip())
#int를 붙여주지 않으면
#1e9는 실수 자료형으로 나타난다.
INF = int(1e9)
#0번 노드는 없다고 생각해야 한다.
#그렇게 되면 node_num의 개수만큼만 있으면
#1개가 부족하게 된다.
visited = [False] * (node_num + 1)
distance = [INF] * (node_num + 1) 
#graph = [[] * (node_num + 1)] 이건 작동하지 않음.
graph = [[] for _ in range(node_num + 1)]

for _ in range(edge_num):
    start, dest, dist = map(int, input().split())
    graph[start].append((dest, dist))

#방문하지 않은 노드 중에서, 가장 최단 거리가 짧은 노드의 번호를 반환
def get_smallest_node():
    min_value = INF
    index = 0
    for i in range(1, node_num + 1):
        if distance[i] < min_value and not visited[i]:
            min_value = distance[i]
            index = i
    return index

def dijkstra(start):
    distance[start] = 0
    visited[start] = True
    for i in graph[start]:
        distance[i[0]] = i[1]
        #[i[0]] == dest노드의 번호가 참조됨
        #즉, distance[dest]와 같음
    #시작 노드는 제외하기 위해 node_num - 1 범위
    for i in range(node_num - 1):
        #최단 거리를 갖고 있는 노드 인덱스 구하기
        curr = get_smallest_node()
        visited[curr] = True
        #현재 노드가 향할 dest 탐색(매번 진행)
        for j in graph[curr]:
            #해당 노드까지 온 거리 + dest까지 가는 거리
            cost = distance[curr] + j[1]
            #이미 기록된 최단 거리보다 해당 노드에서 dest까지 가는 게 나은 경우
            if cost < distance[j[0]]:
                distance[j[0]] = cost
dijkstra(start_node)

#모든 노드로 가기 위한 최단 거리 출력
for i in range(1, node_num + 1):
    if distance[i] == INF:
        print("Unreachable")
    else:
        print(distance[i])
