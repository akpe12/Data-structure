#FloydWarshall
#항상 가장 최단 거리의 값을 구해야 했던 Dijkstra와는 달리
#FloydWarshall은 DP를 활용해야 한다.
#즉, DP를 활용하여, (노드의 개수가 N개라고 할 때)
#N번 만큼의 단계를 반복하여 점화식에 맞기 2차원 리스트를 처리해야 한다.
#Dijkstra에서와는 달리 2차원 리스트를 활용해야 하는 이유는
#모든 노드에 대하여 다른 모든 노드로 가는 최단 거리 정보를 담아야 하기 때문이다.
#*동작 과정*
#각 단계에서는 해당 노드를 거쳐 가는 경우를 고려한다.
#예를 들어 1번 노드에 대해 확인할 때는
#1번 노드를 중간에 거쳐 지나가는 모든 경우를 고려하면 된다.
#ex) A -> B의 비용이 3인데, A -> 1 -> B의 거리 비용이 2이라면
#A -> B의 비용을 2로 갱신하는 것이다.
#알고리즘에서는 현재 확인하고 있는 노드를 제외하고 n-1P2개의 쌍을 단계마다 반복해서 확인하면 된다.
#점화식은
#D[a][b] = min(D[a][b], D[a][k] + D[k][b])
#=> min(a에서 바로 b 가는 비용 vs a에서 k를 거쳐 b로 가는 비용)
#O(n^3)의 시간 복잡도
import sys
input = sys.stdin.readline
INF = int(1e9)

#노드의 개수, 간선의 개수, 간선 정보 입력 받기
node_num = int(input().rstrip())
edge_num = int(input().rstrip())
graph = [[INF] * (node_num + 1) for _ in range(node_num + 1)]

#start와 dest가 같으면 거리가 0이므로
#0으로 초기화
for a in range(1, node_num + 1):
    for b in range(1, node_num + 1):
        if a == b:
            graph[a][b] = 0
            
#각 간선에 대한 정보를 입력받아, 그 값으로 초기화
for _ in range(edge_num):
    start, dest, dist = map(int, input().split())
    graph[start][dest] = dist

#점화식에 따라 FloydWarshall 수행
for k in range(1, node_num + 1):
    for a in range(1, node_num + 1):
        for b in range(1, node_num + 1):
            graph[a][b] = min(graph[a][b], graph[a][k] + graph[k][b])

for a in range(1, node_num + 1):
    for b in range(1, node_num + 1):
        if graph[a][b] == INF:
            print("Unreachable", end = " ")
        else:
            print(graph[a][b], end = " ")
    print()
